using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

public class StreamingServiceManager : MonoBehaviour
{
    //A lot of this is copied from genremanager, so there might be relevant comments there too
    public string streamingServiceRequestURL = "https://api.themoviedb.org/3/watch/providers/movie?api_key=8dbc571fbec87fe32e10d4b0f780affb&language=en-US&watch_region=DK";
    public string streamingServiceListUnprocessed = "empty";
    public List<string> streamingServices;
    string[] nameSeperators = { "\"provider_name\":\"", "\",\"provider_id"};
    public GameObject StreamingServiceScreen;
    public GameObject buttonToInstantiate;
    public int streamingServiceNumber = 0;
    public string streamingServiceObjectName;
    public string streamingServiceObjectID;
    public string streamingServiceObjectPictureURL;
    public string streamingServiceObjectPriority;
    //When you get a streaming service from the api it has these four attributes. Name is what its called, ID is just the identifying number, PictureURL will produce a little symbol if added onto this address: https://www.themoviedb.org/t/p/original, priority determines which order they should be shown in
    public class StreamingServiceObject
    {
        public string name;
        public string id;
        public string pictureURL;
        public string priority;
        public StreamingServiceObject(string objectName, string objectID, string objectPictureURL, string objectPriority)
        {
            name = objectName;
            id = objectID;
            pictureURL = objectPictureURL;
            priority = objectPriority;
        }
    }
    public StreamingServiceObject streamingServiceObject;
    public List<StreamingServiceObject> streamingServiceObjects = new List<StreamingServiceObject>();
    public Transform parent;
    // Start is called before the first frame update
    void Start()
    {
        StartCoroutine(GenerateStreamingServiceList());
        StartCoroutine(StreamingServiceButtonGenerator());
        StartCoroutine(StreamingServiceObjectGenerator());
    }

    IEnumerator GenerateStreamingServiceList()
    {
       UnityWebRequest request = UnityWebRequest.Get(streamingServiceRequestURL);
       yield return request.SendWebRequest();

       if (request.responseCode != 200)
       {
           Debug.Log(request.error);
       }
       else
       {
           streamingServiceListUnprocessed = request.downloadHandler.text;
           foreach (string StreamingService in streamingServiceListUnprocessed.Split(nameSeperators, 0))
           {
               if (!StreamingService.Contains("\"logo_path\"") & !StreamingService.Contains("}"))
               {
                   streamingServices.Add(StreamingService);
               }
           }
       }
    }
    IEnumerator StreamingServiceButtonGenerator()
    {
        while (!StreamingServiceScreen.activeInHierarchy)
        {
            yield return new WaitForSeconds(.1f)    ;
        }
        Debug.Log("The Screen is activated!!!");
        yield return new WaitForSeconds(.50f);
            Text iniButtonText = buttonToInstantiate.GetComponentInChildren<Text>();
            iniButtonText.text = streamingServices[0];
            foreach (string streamingService in streamingServices)
            {
                if (streamingService != streamingServices[0])
                {
                streamingServiceNumber++;
                GameObject instantiatedObject = Instantiate(buttonToInstantiate, new Vector3(buttonToInstantiate.transform.localPosition.x, (buttonToInstantiate.transform.localPosition.y-(streamingServiceNumber*50)), 0f), Quaternion.identity);
                instantiatedObject.name = "Instantiated Button " + streamingServiceNumber;
                instantiatedObject.transform.SetParent(parent, false);
                GameObject.Find("Instantiated Button " + streamingServiceNumber).GetComponentInChildren<Text>().text = streamingServices[streamingServiceNumber];
                }
            GameObject.Find("Back Button ASSS").transform.SetAsLastSibling();
            }
         GameObject.Find("Scrollbar ASSS").SendMessage("ScrollbarMaker");
    }
    //I relatively late in the process realized the need for streaming services to be stored as objects in the app, but this is where the long json string is converted to a bunch of c# objects
    IEnumerator StreamingServiceObjectGenerator()
    {
        yield return new WaitForSeconds (0.1f);
        string[] objectSeperators = {"{","}"};
        foreach (string almostObject in streamingServiceListUnprocessed.Split(objectSeperators, 0))
        {
            //Using the previously defined object seperators did leave me with a few trash strings on account of some formatting quirks, however, since all the important strings generated by this split by chance happen to contain the letter o, I just used that to determine which strings were worthy of processing
            if (almostObject.Contains("o"))
            {
            //This cleans up the object and fits it into predefined variables.
            foreach (string objectSplit in almostObject.Split(','))
            {
                if (objectSplit.Contains("provider_name"))
                {
                    streamingServiceObjectName = objectSplit.Replace("provider_name", "").Replace("\"", "").Replace(":", "").Trim();
                }
                if (objectSplit.Contains("provider_id"))
                {
                   streamingServiceObjectID = objectSplit.Replace("provider_id", "").Replace("\"", "").Replace(":", "").Trim();
                }
                if (objectSplit.Contains("logo_path"))
                {
                   streamingServiceObjectPictureURL = objectSplit.Replace("logo_path", "").Replace("\"", "").Replace(":", "").Trim();
                }
                if (objectSplit.Contains("display_priority"))
                {
                   streamingServiceObjectPriority = objectSplit.Replace("display_priority", "").Replace(":", "").Replace("\"", "").Trim();
                }
            }
            //And this writes it to the variable object streamingServiceObject and adds it to the list
            streamingServiceObject = new StreamingServiceObject(streamingServiceObjectName, streamingServiceObjectID, streamingServiceObjectPictureURL, streamingServiceObjectPriority);
            streamingServiceObjects.Add(streamingServiceObject);
            }
        }
    yield return null;
    }
}
